@mixin dot-before {
  &::before {
    content: "";
    width: .25rem;
    height: .25rem;
    background: $primary-darkest;
    border-radius: 50%;
    display: block;
    position: absolute;
    left: .675rem;
    top: .5rem;

  }
}

@mixin dots-between($height: 1rem, $margin: 0 .2rem) {
  &::before {
    border-bottom: 1px dotted $primary-darker;
    content: "";
    flex-grow: 1;
    height: $height;
    order: 2;
    margin: $margin;
  }
}

@mixin respond-to($media) {
  @if $media == sm-ls {
    @media only screen and (max-height: $break-sm) and (orientation: landscape) { @content; }
  }
  @if $media == sm {
    @media only screen and (max-width: $break-sm) { @content; }
  }
  @else if $media == md {
    @media only screen and (min-width: $break-sm + 1) and (min-height: $break-sm + 1) { @content; }
  }
  @else if $media == lg {
    @media only screen and (min-width: $break-md) and (min-height: $break-md) { @content; }
  }
}

@mixin cube-transform($rotate) {
  transform: scale(1) translateZ(-$hw-sm) $rotate;

  @include respond-to(md) {
    transform: scale(1) translateZ(-$hw-md) $rotate;
  }

  @include respond-to(lg) {
    transform: scale(1) translateZ(-$hw-lg) $rotate;
  }
}

@function rot($rx, $ry, $rz) {
  @return rotateX($rx + deg) rotateY($ry + deg) rotateZ($rz + deg);
}

@mixin show-face($face, $rx, $ry, $rz) {
  $rotate: rot($rx, $ry, $rz);

  &.show-#{$face} {
    @include cube-transform($rotate);
  }
}

@mixin face($face, $rotate) {
  &.#{$face} {
    transform: $rotate translateZ($hw-sm);

    @include respond-to(md) {
      transform: $rotate translateZ($hw-md);
    }

    @include respond-to(lg) {
      transform: $rotate translateZ($hw-lg);
    }
  }
}
